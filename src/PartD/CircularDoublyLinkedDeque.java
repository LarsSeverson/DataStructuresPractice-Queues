package PartD;public class CircularDoublyLinkedDeque<T> implements DequeInterface<T> {    private Node front;    private Node back;    public CircularDoublyLinkedDeque(){        front = null;        back = null;    }    @Override    public void addToFront(T newEntry) {        Node newNode = new Node(newEntry);        if (isEmpty()){            front = newNode;            back = newNode;            return;        }        newNode.next = front;        front.prev = newNode;        front = newNode;    }    @Override    public void addToBack(T newEntry) {        Node newNode = new Node(newEntry);        if (isEmpty()){            front = newNode;            back = newNode;            return;        }        newNode.prev = back;        back.next = newNode;        back = newNode;    }    @Override    public T removeFront() {        if (isEmpty()){            throw new EmptyQueueException();        }        T temp = front.val;        front = front.next;        return temp;    }    @Override    public T removeBack() {        if (isEmpty()){            throw new EmptyQueueException();        }        T temp = back.val;        back = back.prev;        return temp;    }    @Override    public T getFront() {        return front.val;    }    @Override    public T getBack() {        return back.val;    }    @Override    public boolean isEmpty() {        return front == null;    }    @Override    public void clear() {        front = null;    }    private class Node {        private Node next;        private Node prev;        private final T val;        private Node(T val){            next = null;            prev = null;            this.val = val;        }    } // end Node} // end CircularDoublyLinkedDeque