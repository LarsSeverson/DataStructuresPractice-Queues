package PartD;/*    Author: Lars Severson    Date: 11/3/2022    Description:    In a doubly linked chain, the first and last nodes each contain    one null reference, since the first node has no previous node and    the last node has no node after it. In a circular doubly linked chain,    the first node references the last node, and the last node    references the first. Only one external reference is necessary—a    reference to the first node—since we can quickly get to the last    node from the first node. */public class CircularDoublyLinkedDeque<T> implements DequeInterface<T> {    private Node front;    private Node back;    // initialize    public CircularDoublyLinkedDeque(){        front = null;        back = null;    }    @Override    // front won't have a previous / is set to null    public void addToFront(T newEntry) {        Node newNode = new Node(newEntry);        if (isEmpty()){            front = newNode;            back = newNode;            return;        }        newNode.next = front;        front.prev = newNode;        front = newNode;    }    // back won't have a next / is set to null    @Override    public void addToBack(T newEntry) {        Node newNode = new Node(newEntry);        if (isEmpty()){            front = newNode;            back = newNode;            return;        }        newNode.prev = back;        back.next = newNode;        back = newNode;    }    @Override    public T removeFront() {        // for the empty queue exception class        if (isEmpty()){            throw new EmptyQueueException();        }        T temp = front.val;        front = front.next;        return temp;    }    @Override    public T removeBack() {        if (isEmpty()){            throw new EmptyQueueException();        }        T temp = back.val;        back = back.prev;        return temp;    }    // could implement check values for null    @Override    public T getFront() {        return front.val;    }    @Override    public T getBack() {        return back.val;    }    // if the front is null then there is no queue    @Override    public boolean isEmpty() {        return front == null;    }    @Override    public void clear() {        front = null;    }    private class Node {        private Node next;        private Node prev;        private final T val;        private Node(T val){            next = null;            prev = null;            this.val = val;        }    } // end Node} // end CircularDoublyLinkedDeque